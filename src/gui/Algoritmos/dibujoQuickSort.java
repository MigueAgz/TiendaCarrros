/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui.Algoritmos;

import java.awt.Color;
import java.awt.Graphics;

/**
 *
 * @author rosal
 */
public class dibujoQuickSort extends javax.swing.JPanel implements Runnable {

    /**
     * Creates new form arreglodibujado
     *
     * @param arreglo
     */
    public dibujoQuickSort(int[] arreglo) {
        initComponents();
        this.arreglo = arreglo;
    }
    int[] arreglo;

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        int x = 50;
        int n = arreglo.length;
        int maxValue = getMaxValue(arreglo); // Obtener el valor máximo del arreglo
        g.setColor(Color.black);
        for (int i = 0; i < n; i++) {
            int barHeight = (int) ((arreglo[i] * getHeight() * 0.5) / maxValue); // Calcular la altura proporcional
            int y = getHeight() - barHeight - 50; // Calcular la posición vertical del rectángulo

            g.drawRect(x, y, 20, barHeight);
            g.drawString(Integer.toString(arreglo[i]), x, y + barHeight + 15); // Mostrar el valor del arreglo debajo de la barra
            x += 30;
        }
    }

// Método auxiliar para obtener el valor máximo del arreglo
    private int getMaxValue(int[] array) {
        int max = array[0];
        for (int i = 1; i < array.length; i++) {
            if (array[i] > max) {
                max = array[i];
            }
        }
        return max;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void run() {
        quickSort(arreglo, 0, arreglo.length - 1);
    }

    public void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            // Particionar el arreglo y obtener el índice de pivote
            int pivotIndex = partition(arr, low, high);

            // Ordenar los elementos antes y después del pivote
            quickSort(arr, low, pivotIndex - 1);
            quickSort(arr, pivotIndex + 1, high);
            //pintamos
            repaint();
            try {
                //un sleep
                Thread.sleep(100);
            } catch (InterruptedException ex) {
                ex.printStackTrace();
            }

        }
    }

    private int partition(int[] arr, int low, int high) {
        // Tomar el último elemento como pivote
        int pivot = arr[high];

        // Índice del elemento más pequeño y contador de iteración
        int i = (low - 1);

        for (int j = low; j <= high - 1; j++) {
            // Si el elemento actual es más pequeño que el pivote
            if (arr[j] < pivot) {
                i++;

                // Intercambiar arr[i] y arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
                //pintamos
                repaint();
                try {
                    //un sleep
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
            }
        }

        // Intercambiar arr[i+1] y arr[high] (o el pivote)
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;
        //pintamos
        repaint();
        try {
            //un sleep
            Thread.sleep(100);
        } catch (InterruptedException ex) {
            ex.printStackTrace();
        }

        return i + 1;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
